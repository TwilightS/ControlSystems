
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000d64  00000dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ea8  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a5  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00003328  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010e  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  00003b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000003c  00000000  00000000  00003fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010d  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00004101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c2 56       	subi	r28, 0x62	; 98
  a0:	d0 40       	sbci	r29, 0x00	; 0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  ac:	8a e3       	ldi	r24, 0x3A	; 58
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
	DDRB = 0x00;
  b6:	87 e3       	ldi	r24, 0x37	; 55
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
	PORTB = 0b0000001;
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	{
		PORTA = 0b11111111;
		
	}
	*/
		if (!(PINB & 0x01))
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	80 81       	ld	r24, Z
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	90 70       	andi	r25, 0x00	; 0
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	09 f0       	breq	.+2      	; 0xde <main+0x4c>
  dc:	89 c4       	rjmp	.+2322   	; 0x9f0 <__stack+0x191>
		{
			int x = 0;
  de:	1a 82       	std	Y+2, r1	; 0x02
  e0:	19 82       	std	Y+1, r1	; 0x01
			
			while(x < 1000)
  e2:	ce c1       	rjmp	.+924    	; 0x480 <main+0x3ee>
			{
				x+=1;
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	9a 83       	std	Y+2, r25	; 0x02
  ec:	89 83       	std	Y+1, r24	; 0x01
				PORTA = 0b00000000;
  ee:	8b e3       	ldi	r24, 0x3B	; 59
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
				_delay_us(x);
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	aa 27       	eor	r26, r26
  fc:	97 fd       	sbrc	r25, 7
  fe:	a0 95       	com	r26
 100:	ba 2f       	mov	r27, r26
 102:	bc 01       	movw	r22, r24
 104:	cd 01       	movw	r24, r26
 106:	0e 94 99 05 	call	0xb32	; 0xb32 <__floatsisf>
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	8b 83       	std	Y+3, r24	; 0x03
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	ad 83       	std	Y+5, r26	; 0x05
 114:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
 116:	6b 81       	ldd	r22, Y+3	; 0x03
 118:	7c 81       	ldd	r23, Y+4	; 0x04
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	9e 81       	ldd	r25, Y+6	; 0x06
 11e:	2b ea       	ldi	r18, 0xAB	; 171
 120:	3a ea       	ldi	r19, 0xAA	; 170
 122:	4a ea       	ldi	r20, 0xAA	; 170
 124:	50 e4       	ldi	r21, 0x40	; 64
 126:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	8f 83       	std	Y+7, r24	; 0x07
 130:	98 87       	std	Y+8, r25	; 0x08
 132:	a9 87       	std	Y+9, r26	; 0x09
 134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 136:	11 e0       	ldi	r17, 0x01	; 1
 138:	6f 81       	ldd	r22, Y+7	; 0x07
 13a:	78 85       	ldd	r23, Y+8	; 0x08
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	5f e3       	ldi	r21, 0x3F	; 63
 148:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 14c:	88 23       	and	r24, r24
 14e:	0c f0       	brlt	.+2      	; 0x152 <main+0xc0>
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	11 23       	and	r17, r17
 154:	19 f0       	breq	.+6      	; 0x15c <main+0xca>
		__ticks = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	8b 87       	std	Y+11, r24	; 0x0b
 15a:	a3 c0       	rjmp	.+326    	; 0x2a2 <main+0x210>
	else if (__tmp > 255)
 15c:	11 e0       	ldi	r17, 0x01	; 1
 15e:	6f 81       	ldd	r22, Y+7	; 0x07
 160:	78 85       	ldd	r23, Y+8	; 0x08
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	9a 85       	ldd	r25, Y+10	; 0x0a
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	4f e7       	ldi	r20, 0x7F	; 127
 16c:	53 e4       	ldi	r21, 0x43	; 67
 16e:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	0c f0       	brlt	.+2      	; 0x178 <main+0xe6>
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	11 23       	and	r17, r17
 17a:	09 f4       	brne	.+2      	; 0x17e <main+0xec>
 17c:	89 c0       	rjmp	.+274    	; 0x290 <main+0x1fe>
	{
		_delay_ms(__us / 1000.0);
 17e:	6b 81       	ldd	r22, Y+3	; 0x03
 180:	7c 81       	ldd	r23, Y+4	; 0x04
 182:	8d 81       	ldd	r24, Y+5	; 0x05
 184:	9e 81       	ldd	r25, Y+6	; 0x06
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	4a e7       	ldi	r20, 0x7A	; 122
 18c:	54 e4       	ldi	r21, 0x44	; 68
 18e:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	8c 87       	std	Y+12, r24	; 0x0c
 198:	9d 87       	std	Y+13, r25	; 0x0d
 19a:	ae 87       	std	Y+14, r26	; 0x0e
 19c:	bf 87       	std	Y+15, r27	; 0x0f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 19e:	6c 85       	ldd	r22, Y+12	; 0x0c
 1a0:	7d 85       	ldd	r23, Y+13	; 0x0d
 1a2:	8e 85       	ldd	r24, Y+14	; 0x0e
 1a4:	9f 85       	ldd	r25, Y+15	; 0x0f
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a e7       	ldi	r20, 0x7A	; 122
 1ac:	55 e4       	ldi	r21, 0x45	; 69
 1ae:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	88 8b       	std	Y+16, r24	; 0x10
 1b8:	99 8b       	std	Y+17, r25	; 0x11
 1ba:	aa 8b       	std	Y+18, r26	; 0x12
 1bc:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
 1be:	11 e0       	ldi	r17, 0x01	; 1
 1c0:	68 89       	ldd	r22, Y+16	; 0x10
 1c2:	79 89       	ldd	r23, Y+17	; 0x11
 1c4:	8a 89       	ldd	r24, Y+18	; 0x12
 1c6:	9b 89       	ldd	r25, Y+19	; 0x13
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	5f e3       	ldi	r21, 0x3F	; 63
 1d0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 1d4:	88 23       	and	r24, r24
 1d6:	0c f0       	brlt	.+2      	; 0x1da <main+0x148>
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	11 23       	and	r17, r17
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <main+0x156>
		__ticks = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9d 8b       	std	Y+21, r25	; 0x15
 1e4:	8c 8b       	std	Y+20, r24	; 0x14
 1e6:	46 c0       	rjmp	.+140    	; 0x274 <main+0x1e2>
	else if (__tmp > 65535)
 1e8:	11 e0       	ldi	r17, 0x01	; 1
 1ea:	68 89       	ldd	r22, Y+16	; 0x10
 1ec:	79 89       	ldd	r23, Y+17	; 0x11
 1ee:	8a 89       	ldd	r24, Y+18	; 0x12
 1f0:	9b 89       	ldd	r25, Y+19	; 0x13
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	3f ef       	ldi	r19, 0xFF	; 255
 1f6:	4f e7       	ldi	r20, 0x7F	; 127
 1f8:	57 e4       	ldi	r21, 0x47	; 71
 1fa:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	0c f0       	brlt	.+2      	; 0x204 <main+0x172>
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	11 23       	and	r17, r17
 206:	61 f1       	breq	.+88     	; 0x260 <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 208:	6c 85       	ldd	r22, Y+12	; 0x0c
 20a:	7d 85       	ldd	r23, Y+13	; 0x0d
 20c:	8e 85       	ldd	r24, Y+14	; 0x0e
 20e:	9f 85       	ldd	r25, Y+15	; 0x0f
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e2       	ldi	r20, 0x20	; 32
 216:	51 e4       	ldi	r21, 0x41	; 65
 218:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	9d 8b       	std	Y+21, r25	; 0x15
 22e:	8c 8b       	std	Y+20, r24	; 0x14
 230:	12 c0       	rjmp	.+36     	; 0x256 <main+0x1c4>
 232:	80 e9       	ldi	r24, 0x90	; 144
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	9f 8b       	std	Y+23, r25	; 0x17
 238:	8e 8b       	std	Y+22, r24	; 0x16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23a:	8e 89       	ldd	r24, Y+22	; 0x16
 23c:	9f 89       	ldd	r25, Y+23	; 0x17
 23e:	8c 01       	movw	r16, r24
 240:	c8 01       	movw	r24, r16
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x1b0>
 246:	8c 01       	movw	r16, r24
 248:	1f 8b       	std	Y+23, r17	; 0x17
 24a:	0e 8b       	std	Y+22, r16	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24c:	8c 89       	ldd	r24, Y+20	; 0x14
 24e:	9d 89       	ldd	r25, Y+21	; 0x15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	9d 8b       	std	Y+21, r25	; 0x15
 254:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	8c 89       	ldd	r24, Y+20	; 0x14
 258:	9d 89       	ldd	r25, Y+21	; 0x15
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	51 f7       	brne	.-44     	; 0x232 <main+0x1a0>
 25e:	28 c0       	rjmp	.+80     	; 0x2b0 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 260:	68 89       	ldd	r22, Y+16	; 0x10
 262:	79 89       	ldd	r23, Y+17	; 0x11
 264:	8a 89       	ldd	r24, Y+18	; 0x12
 266:	9b 89       	ldd	r25, Y+19	; 0x13
 268:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	9d 8b       	std	Y+21, r25	; 0x15
 272:	8c 8b       	std	Y+20, r24	; 0x14
 274:	8c 89       	ldd	r24, Y+20	; 0x14
 276:	9d 89       	ldd	r25, Y+21	; 0x15
 278:	99 8f       	std	Y+25, r25	; 0x19
 27a:	88 8f       	std	Y+24, r24	; 0x18
 27c:	88 8d       	ldd	r24, Y+24	; 0x18
 27e:	99 8d       	ldd	r25, Y+25	; 0x19
 280:	8c 01       	movw	r16, r24
 282:	f8 01       	movw	r30, r16
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x1f2>
 288:	8f 01       	movw	r16, r30
 28a:	19 8f       	std	Y+25, r17	; 0x19
 28c:	08 8f       	std	Y+24, r16	; 0x18
 28e:	10 c0       	rjmp	.+32     	; 0x2b0 <main+0x21e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 290:	6f 81       	ldd	r22, Y+7	; 0x07
 292:	78 85       	ldd	r23, Y+8	; 0x08
 294:	89 85       	ldd	r24, Y+9	; 0x09
 296:	9a 85       	ldd	r25, Y+10	; 0x0a
 298:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	8b 87       	std	Y+11, r24	; 0x0b
 2a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a4:	8a 8f       	std	Y+26, r24	; 0x1a
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
 2a8:	18 2f       	mov	r17, r24
 2aa:	1a 95       	dec	r17
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x218>
 2ae:	1a 8f       	std	Y+26, r17	; 0x1a
				PORTA = 0b11111111;
 2b0:	8b e3       	ldi	r24, 0x3B	; 59
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
				_delay_us(1000 - x);
 2ba:	28 ee       	ldi	r18, 0xE8	; 232
 2bc:	33 e0       	ldi	r19, 0x03	; 3
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	a9 01       	movw	r20, r18
 2c4:	48 1b       	sub	r20, r24
 2c6:	59 0b       	sbc	r21, r25
 2c8:	ca 01       	movw	r24, r20
 2ca:	aa 27       	eor	r26, r26
 2cc:	97 fd       	sbrc	r25, 7
 2ce:	a0 95       	com	r26
 2d0:	ba 2f       	mov	r27, r26
 2d2:	bc 01       	movw	r22, r24
 2d4:	cd 01       	movw	r24, r26
 2d6:	0e 94 99 05 	call	0xb32	; 0xb32 <__floatsisf>
 2da:	dc 01       	movw	r26, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	8b 8f       	std	Y+27, r24	; 0x1b
 2e0:	9c 8f       	std	Y+28, r25	; 0x1c
 2e2:	ad 8f       	std	Y+29, r26	; 0x1d
 2e4:	be 8f       	std	Y+30, r27	; 0x1e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
 2e6:	6b 8d       	ldd	r22, Y+27	; 0x1b
 2e8:	7c 8d       	ldd	r23, Y+28	; 0x1c
 2ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ee:	2b ea       	ldi	r18, 0xAB	; 171
 2f0:	3a ea       	ldi	r19, 0xAA	; 170
 2f2:	4a ea       	ldi	r20, 0xAA	; 170
 2f4:	50 e4       	ldi	r21, 0x40	; 64
 2f6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 2fa:	dc 01       	movw	r26, r24
 2fc:	cb 01       	movw	r24, r22
 2fe:	8f 8f       	std	Y+31, r24	; 0x1f
 300:	98 a3       	lds	r25, 0x58
 302:	a9 a3       	lds	r26, 0x59
 304:	ba a3       	lds	r27, 0x5a
	if (__tmp < 1.0)
 306:	11 e0       	ldi	r17, 0x01	; 1
 308:	6f 8d       	ldd	r22, Y+31	; 0x1f
 30a:	78 a1       	lds	r23, 0x48
 30c:	89 a1       	lds	r24, 0x49
 30e:	9a a1       	lds	r25, 0x4a
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e8       	ldi	r20, 0x80	; 128
 316:	5f e3       	ldi	r21, 0x3F	; 63
 318:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 31c:	88 23       	and	r24, r24
 31e:	0c f0       	brlt	.+2      	; 0x322 <main+0x290>
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	11 23       	and	r17, r17
 324:	19 f0       	breq	.+6      	; 0x32c <main+0x29a>
		__ticks = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	8b a3       	lds	r24, 0x5b
 32a:	a3 c0       	rjmp	.+326    	; 0x472 <main+0x3e0>
	else if (__tmp > 255)
 32c:	11 e0       	ldi	r17, 0x01	; 1
 32e:	6f 8d       	ldd	r22, Y+31	; 0x1f
 330:	78 a1       	lds	r23, 0x48
 332:	89 a1       	lds	r24, 0x49
 334:	9a a1       	lds	r25, 0x4a
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	4f e7       	ldi	r20, 0x7F	; 127
 33c:	53 e4       	ldi	r21, 0x43	; 67
 33e:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 342:	18 16       	cp	r1, r24
 344:	0c f0       	brlt	.+2      	; 0x348 <main+0x2b6>
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	11 23       	and	r17, r17
 34a:	09 f4       	brne	.+2      	; 0x34e <main+0x2bc>
 34c:	89 c0       	rjmp	.+274    	; 0x460 <main+0x3ce>
	{
		_delay_ms(__us / 1000.0);
 34e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 350:	7c 8d       	ldd	r23, Y+28	; 0x1c
 352:	8d 8d       	ldd	r24, Y+29	; 0x1d
 354:	9e 8d       	ldd	r25, Y+30	; 0x1e
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	4a e7       	ldi	r20, 0x7A	; 122
 35c:	54 e4       	ldi	r21, 0x44	; 68
 35e:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	8c a3       	lds	r24, 0x5c
 368:	9d a3       	lds	r25, 0x5d
 36a:	ae a3       	lds	r26, 0x5e
 36c:	bf a3       	lds	r27, 0x5f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 36e:	6c a1       	lds	r22, 0x4c
 370:	7d a1       	lds	r23, 0x4d
 372:	8e a1       	lds	r24, 0x4e
 374:	9f a1       	lds	r25, 0x4f
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	4a e7       	ldi	r20, 0x7A	; 122
 37c:	55 e4       	ldi	r21, 0x45	; 69
 37e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
 386:	88 a7       	lds	r24, 0x78
 388:	99 a7       	lds	r25, 0x79
 38a:	aa a7       	lds	r26, 0x7a
 38c:	bb a7       	lds	r27, 0x7b
	if (__tmp < 1.0)
 38e:	11 e0       	ldi	r17, 0x01	; 1
 390:	68 a5       	lds	r22, 0x68
 392:	79 a5       	lds	r23, 0x69
 394:	8a a5       	lds	r24, 0x6a
 396:	9b a5       	lds	r25, 0x6b
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e8       	ldi	r20, 0x80	; 128
 39e:	5f e3       	ldi	r21, 0x3F	; 63
 3a0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 3a4:	88 23       	and	r24, r24
 3a6:	0c f0       	brlt	.+2      	; 0x3aa <main+0x318>
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	11 23       	and	r17, r17
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <main+0x326>
		__ticks = 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9d a7       	lds	r25, 0x7d
 3b4:	8c a7       	lds	r24, 0x7c
 3b6:	46 c0       	rjmp	.+140    	; 0x444 <main+0x3b2>
	else if (__tmp > 65535)
 3b8:	11 e0       	ldi	r17, 0x01	; 1
 3ba:	68 a5       	lds	r22, 0x68
 3bc:	79 a5       	lds	r23, 0x69
 3be:	8a a5       	lds	r24, 0x6a
 3c0:	9b a5       	lds	r25, 0x6b
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	3f ef       	ldi	r19, 0xFF	; 255
 3c6:	4f e7       	ldi	r20, 0x7F	; 127
 3c8:	57 e4       	ldi	r21, 0x47	; 71
 3ca:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 3ce:	18 16       	cp	r1, r24
 3d0:	0c f0       	brlt	.+2      	; 0x3d4 <main+0x342>
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	11 23       	and	r17, r17
 3d6:	61 f1       	breq	.+88     	; 0x430 <main+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d8:	6c a1       	lds	r22, 0x4c
 3da:	7d a1       	lds	r23, 0x4d
 3dc:	8e a1       	lds	r24, 0x4e
 3de:	9f a1       	lds	r25, 0x4f
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e2       	ldi	r20, 0x20	; 32
 3e6:	51 e4       	ldi	r21, 0x41	; 65
 3e8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 3ec:	dc 01       	movw	r26, r24
 3ee:	cb 01       	movw	r24, r22
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 3f8:	dc 01       	movw	r26, r24
 3fa:	cb 01       	movw	r24, r22
 3fc:	9d a7       	lds	r25, 0x7d
 3fe:	8c a7       	lds	r24, 0x7c
 400:	12 c0       	rjmp	.+36     	; 0x426 <main+0x394>
 402:	80 e9       	ldi	r24, 0x90	; 144
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9f a7       	lds	r25, 0x7f
 408:	8e a7       	lds	r24, 0x7e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40a:	8e a5       	lds	r24, 0x6e
 40c:	9f a5       	lds	r25, 0x6f
 40e:	8c 01       	movw	r16, r24
 410:	c8 01       	movw	r24, r16
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <main+0x380>
 416:	8c 01       	movw	r16, r24
 418:	1f a7       	lds	r17, 0x7f
 41a:	0e a7       	lds	r16, 0x7e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41c:	8c a5       	lds	r24, 0x6c
 41e:	9d a5       	lds	r25, 0x6d
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	9d a7       	lds	r25, 0x7d
 424:	8c a7       	lds	r24, 0x7c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 426:	8c a5       	lds	r24, 0x6c
 428:	9d a5       	lds	r25, 0x6d
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	51 f7       	brne	.-44     	; 0x402 <main+0x370>
 42e:	28 c0       	rjmp	.+80     	; 0x480 <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 430:	68 a5       	lds	r22, 0x68
 432:	79 a5       	lds	r23, 0x69
 434:	8a a5       	lds	r24, 0x6a
 436:	9b a5       	lds	r25, 0x6b
 438:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 43c:	dc 01       	movw	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	9d a7       	lds	r25, 0x7d
 442:	8c a7       	lds	r24, 0x7c
 444:	8c a5       	lds	r24, 0x6c
 446:	9d a5       	lds	r25, 0x6d
 448:	99 ab       	sts	0x59, r25
 44a:	88 ab       	sts	0x58, r24
 44c:	88 a9       	sts	0x48, r24
 44e:	99 a9       	sts	0x49, r25
 450:	8c 01       	movw	r16, r24
 452:	f8 01       	movw	r30, r16
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <main+0x3c2>
 458:	8f 01       	movw	r16, r30
 45a:	19 ab       	sts	0x59, r17
 45c:	08 ab       	sts	0x58, r16
 45e:	10 c0       	rjmp	.+32     	; 0x480 <main+0x3ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 460:	6f 8d       	ldd	r22, Y+31	; 0x1f
 462:	78 a1       	lds	r23, 0x48
 464:	89 a1       	lds	r24, 0x49
 466:	9a a1       	lds	r25, 0x4a
 468:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 46c:	dc 01       	movw	r26, r24
 46e:	cb 01       	movw	r24, r22
 470:	8b a3       	lds	r24, 0x5b
 472:	8b a1       	lds	r24, 0x4b
 474:	8a ab       	sts	0x5a, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 476:	8a a9       	sts	0x4a, r24
 478:	18 2f       	mov	r17, r24
 47a:	1a 95       	dec	r17
 47c:	f1 f7       	brne	.-4      	; 0x47a <main+0x3e8>
 47e:	1a ab       	sts	0x5a, r17
	*/
		if (!(PINB & 0x01))
		{
			int x = 0;
			
			while(x < 1000)
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	9a 81       	ldd	r25, Y+2	; 0x02
 484:	f3 e0       	ldi	r31, 0x03	; 3
 486:	88 3e       	cpi	r24, 0xE8	; 232
 488:	9f 07       	cpc	r25, r31
 48a:	0c f4       	brge	.+2      	; 0x48e <main+0x3fc>
 48c:	2b ce       	rjmp	.-938    	; 0xe4 <main+0x52>
				_delay_us(x);
				PORTA = 0b11111111;
				_delay_us(1000 - x);
			
			}
			x = 0;
 48e:	1a 82       	std	Y+2, r1	; 0x02
 490:	19 82       	std	Y+1, r1	; 0x01
			while(x < 1000)
 492:	a6 c2       	rjmp	.+1356   	; 0x9e0 <__stack+0x181>
			{
				x+=1;
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	9a 83       	std	Y+2, r25	; 0x02
 49c:	89 83       	std	Y+1, r24	; 0x01
				PORTA = 0b11111111;
 49e:	8b e3       	ldi	r24, 0x3B	; 59
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
				_delay_us(x);
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	9a 81       	ldd	r25, Y+2	; 0x02
 4ac:	aa 27       	eor	r26, r26
 4ae:	97 fd       	sbrc	r25, 7
 4b0:	a0 95       	com	r26
 4b2:	ba 2f       	mov	r27, r26
 4b4:	bc 01       	movw	r22, r24
 4b6:	cd 01       	movw	r24, r26
 4b8:	0e 94 99 05 	call	0xb32	; 0xb32 <__floatsisf>
 4bc:	dc 01       	movw	r26, r24
 4be:	cb 01       	movw	r24, r22
 4c0:	8b ab       	sts	0x5b, r24
 4c2:	9c ab       	sts	0x5c, r25
 4c4:	ad ab       	sts	0x5d, r26
 4c6:	be ab       	sts	0x5e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
 4c8:	6b a9       	sts	0x4b, r22
 4ca:	7c a9       	sts	0x4c, r23
 4cc:	8d a9       	sts	0x4d, r24
 4ce:	9e a9       	sts	0x4e, r25
 4d0:	2b ea       	ldi	r18, 0xAB	; 171
 4d2:	3a ea       	ldi	r19, 0xAA	; 170
 4d4:	4a ea       	ldi	r20, 0xAA	; 170
 4d6:	50 e4       	ldi	r21, 0x40	; 64
 4d8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 4dc:	dc 01       	movw	r26, r24
 4de:	cb 01       	movw	r24, r22
 4e0:	8f ab       	sts	0x5f, r24
 4e2:	98 af       	sts	0x78, r25
 4e4:	a9 af       	sts	0x79, r26
 4e6:	ba af       	sts	0x7a, r27
	if (__tmp < 1.0)
 4e8:	11 e0       	ldi	r17, 0x01	; 1
 4ea:	6f a9       	sts	0x4f, r22
 4ec:	78 ad       	sts	0x68, r23
 4ee:	89 ad       	sts	0x69, r24
 4f0:	9a ad       	sts	0x6a, r25
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e8       	ldi	r20, 0x80	; 128
 4f8:	5f e3       	ldi	r21, 0x3F	; 63
 4fa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 4fe:	88 23       	and	r24, r24
 500:	0c f0       	brlt	.+2      	; 0x504 <main+0x472>
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	11 23       	and	r17, r17
 506:	19 f0       	breq	.+6      	; 0x50e <main+0x47c>
		__ticks = 1;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	8b af       	sts	0x7b, r24
 50c:	e9 c0       	rjmp	.+466    	; 0x6e0 <main+0x64e>
	else if (__tmp > 255)
 50e:	11 e0       	ldi	r17, 0x01	; 1
 510:	6f a9       	sts	0x4f, r22
 512:	78 ad       	sts	0x68, r23
 514:	89 ad       	sts	0x69, r24
 516:	9a ad       	sts	0x6a, r25
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	4f e7       	ldi	r20, 0x7F	; 127
 51e:	53 e4       	ldi	r21, 0x43	; 67
 520:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 524:	18 16       	cp	r1, r24
 526:	0c f0       	brlt	.+2      	; 0x52a <main+0x498>
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	11 23       	and	r17, r17
 52c:	09 f4       	brne	.+2      	; 0x530 <main+0x49e>
 52e:	cf c0       	rjmp	.+414    	; 0x6ce <main+0x63c>
	{
		_delay_ms(__us / 1000.0);
 530:	6b a9       	sts	0x4b, r22
 532:	7c a9       	sts	0x4c, r23
 534:	8d a9       	sts	0x4d, r24
 536:	9e a9       	sts	0x4e, r25
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	4a e7       	ldi	r20, 0x7A	; 122
 53e:	54 e4       	ldi	r21, 0x44	; 68
 540:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 544:	dc 01       	movw	r26, r24
 546:	cb 01       	movw	r24, r22
 548:	8c af       	sts	0x7c, r24
 54a:	9d af       	sts	0x7d, r25
 54c:	ae af       	sts	0x7e, r26
 54e:	bf af       	sts	0x7f, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 550:	8e 01       	movw	r16, r28
 552:	00 5c       	subi	r16, 0xC0	; 192
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	6c ad       	sts	0x6c, r22
 558:	7d ad       	sts	0x6d, r23
 55a:	8e ad       	sts	0x6e, r24
 55c:	9f ad       	sts	0x6f, r25
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	4a e7       	ldi	r20, 0x7A	; 122
 564:	55 e4       	ldi	r21, 0x45	; 69
 566:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 56a:	dc 01       	movw	r26, r24
 56c:	cb 01       	movw	r24, r22
 56e:	f8 01       	movw	r30, r16
 570:	80 83       	st	Z, r24
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	a2 83       	std	Z+2, r26	; 0x02
 576:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 578:	ce 01       	movw	r24, r28
 57a:	80 5c       	subi	r24, 0xC0	; 192
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	11 e0       	ldi	r17, 0x01	; 1
 580:	fc 01       	movw	r30, r24
 582:	60 81       	ld	r22, Z
 584:	71 81       	ldd	r23, Z+1	; 0x01
 586:	82 81       	ldd	r24, Z+2	; 0x02
 588:	93 81       	ldd	r25, Z+3	; 0x03
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 e8       	ldi	r20, 0x80	; 128
 590:	5f e3       	ldi	r21, 0x3F	; 63
 592:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 596:	88 23       	and	r24, r24
 598:	0c f0       	brlt	.+2      	; 0x59c <main+0x50a>
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	11 23       	and	r17, r17
 59e:	49 f0       	breq	.+18     	; 0x5b2 <main+0x520>
		__ticks = 1;
 5a0:	ce 01       	movw	r24, r28
 5a2:	8c 5b       	subi	r24, 0xBC	; 188
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	fc 01       	movw	r30, r24
 5ac:	31 83       	std	Z+1, r19	; 0x01
 5ae:	20 83       	st	Z, r18
 5b0:	70 c0       	rjmp	.+224    	; 0x692 <main+0x600>
	else if (__tmp > 65535)
 5b2:	ce 01       	movw	r24, r28
 5b4:	80 5c       	subi	r24, 0xC0	; 192
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	11 e0       	ldi	r17, 0x01	; 1
 5ba:	fc 01       	movw	r30, r24
 5bc:	60 81       	ld	r22, Z
 5be:	71 81       	ldd	r23, Z+1	; 0x01
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	93 81       	ldd	r25, Z+3	; 0x03
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	3f ef       	ldi	r19, 0xFF	; 255
 5c8:	4f e7       	ldi	r20, 0x7F	; 127
 5ca:	57 e4       	ldi	r21, 0x47	; 71
 5cc:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 5d0:	18 16       	cp	r1, r24
 5d2:	0c f0       	brlt	.+2      	; 0x5d6 <main+0x544>
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	11 23       	and	r17, r17
 5d8:	09 f4       	brne	.+2      	; 0x5dc <main+0x54a>
 5da:	49 c0       	rjmp	.+146    	; 0x66e <main+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5dc:	6c ad       	sts	0x6c, r22
 5de:	7d ad       	sts	0x6d, r23
 5e0:	8e ad       	sts	0x6e, r24
 5e2:	9f ad       	sts	0x6f, r25
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	40 e2       	ldi	r20, 0x20	; 32
 5ea:	51 e4       	ldi	r21, 0x41	; 65
 5ec:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 5f0:	dc 01       	movw	r26, r24
 5f2:	cb 01       	movw	r24, r22
 5f4:	8e 01       	movw	r16, r28
 5f6:	0c 5b       	subi	r16, 0xBC	; 188
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
 5fa:	bc 01       	movw	r22, r24
 5fc:	cd 01       	movw	r24, r26
 5fe:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 602:	dc 01       	movw	r26, r24
 604:	cb 01       	movw	r24, r22
 606:	f8 01       	movw	r30, r16
 608:	91 83       	std	Z+1, r25	; 0x01
 60a:	80 83       	st	Z, r24
 60c:	27 c0       	rjmp	.+78     	; 0x65c <main+0x5ca>
 60e:	ce 01       	movw	r24, r28
 610:	8a 5b       	subi	r24, 0xBA	; 186
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	20 e9       	ldi	r18, 0x90	; 144
 616:	31 e0       	ldi	r19, 0x01	; 1
 618:	fc 01       	movw	r30, r24
 61a:	31 83       	std	Z+1, r19	; 0x01
 61c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 61e:	ce 01       	movw	r24, r28
 620:	8a 5b       	subi	r24, 0xBA	; 186
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	fc 01       	movw	r30, r24
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	8c 01       	movw	r16, r24
 62c:	c8 01       	movw	r24, r16
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <main+0x59c>
 632:	8c 01       	movw	r16, r24
 634:	ce 01       	movw	r24, r28
 636:	8a 5b       	subi	r24, 0xBA	; 186
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	fc 01       	movw	r30, r24
 63c:	11 83       	std	Z+1, r17	; 0x01
 63e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 640:	ce 01       	movw	r24, r28
 642:	8c 5b       	subi	r24, 0xBC	; 188
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	9e 01       	movw	r18, r28
 648:	2c 5b       	subi	r18, 0xBC	; 188
 64a:	3f 4f       	sbci	r19, 0xFF	; 255
 64c:	f9 01       	movw	r30, r18
 64e:	20 81       	ld	r18, Z
 650:	31 81       	ldd	r19, Z+1	; 0x01
 652:	21 50       	subi	r18, 0x01	; 1
 654:	30 40       	sbci	r19, 0x00	; 0
 656:	fc 01       	movw	r30, r24
 658:	31 83       	std	Z+1, r19	; 0x01
 65a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 65c:	ce 01       	movw	r24, r28
 65e:	8c 5b       	subi	r24, 0xBC	; 188
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	fc 01       	movw	r30, r24
 664:	80 81       	ld	r24, Z
 666:	91 81       	ldd	r25, Z+1	; 0x01
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	89 f6       	brne	.-94     	; 0x60e <main+0x57c>
 66c:	4c c0       	rjmp	.+152    	; 0x706 <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 66e:	8e 01       	movw	r16, r28
 670:	0c 5b       	subi	r16, 0xBC	; 188
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	ce 01       	movw	r24, r28
 676:	80 5c       	subi	r24, 0xC0	; 192
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	fc 01       	movw	r30, r24
 67c:	60 81       	ld	r22, Z
 67e:	71 81       	ldd	r23, Z+1	; 0x01
 680:	82 81       	ldd	r24, Z+2	; 0x02
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 688:	dc 01       	movw	r26, r24
 68a:	cb 01       	movw	r24, r22
 68c:	f8 01       	movw	r30, r16
 68e:	91 83       	std	Z+1, r25	; 0x01
 690:	80 83       	st	Z, r24
 692:	ce 01       	movw	r24, r28
 694:	88 5b       	subi	r24, 0xB8	; 184
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	9e 01       	movw	r18, r28
 69a:	2c 5b       	subi	r18, 0xBC	; 188
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	31 81       	ldd	r19, Z+1	; 0x01
 6a4:	fc 01       	movw	r30, r24
 6a6:	31 83       	std	Z+1, r19	; 0x01
 6a8:	20 83       	st	Z, r18
 6aa:	ce 01       	movw	r24, r28
 6ac:	88 5b       	subi	r24, 0xB8	; 184
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	fc 01       	movw	r30, r24
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	8c 01       	movw	r16, r24
 6b8:	c8 01       	movw	r24, r16
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <main+0x628>
 6be:	8c 01       	movw	r16, r24
 6c0:	ce 01       	movw	r24, r28
 6c2:	88 5b       	subi	r24, 0xB8	; 184
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	fc 01       	movw	r30, r24
 6c8:	11 83       	std	Z+1, r17	; 0x01
 6ca:	00 83       	st	Z, r16
 6cc:	1c c0       	rjmp	.+56     	; 0x706 <main+0x674>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 6ce:	6f a9       	sts	0x4f, r22
 6d0:	78 ad       	sts	0x68, r23
 6d2:	89 ad       	sts	0x69, r24
 6d4:	9a ad       	sts	0x6a, r25
 6d6:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 6da:	dc 01       	movw	r26, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	8b af       	sts	0x7b, r24
 6e0:	ce 01       	movw	r24, r28
 6e2:	86 5b       	subi	r24, 0xB6	; 182
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	2b ad       	sts	0x6b, r18
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6ec:	ce 01       	movw	r24, r28
 6ee:	86 5b       	subi	r24, 0xB6	; 182
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	fc 01       	movw	r30, r24
 6f4:	80 81       	ld	r24, Z
 6f6:	18 2f       	mov	r17, r24
 6f8:	1a 95       	dec	r17
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <main+0x666>
 6fc:	ce 01       	movw	r24, r28
 6fe:	86 5b       	subi	r24, 0xB6	; 182
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	fc 01       	movw	r30, r24
 704:	10 83       	st	Z, r17
				PORTA = 0b00000000;
 706:	8b e3       	ldi	r24, 0x3B	; 59
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	fc 01       	movw	r30, r24
 70c:	10 82       	st	Z, r1
				_delay_us(1000 - x);
 70e:	28 ee       	ldi	r18, 0xE8	; 232
 710:	33 e0       	ldi	r19, 0x03	; 3
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	9a 81       	ldd	r25, Y+2	; 0x02
 716:	a9 01       	movw	r20, r18
 718:	48 1b       	sub	r20, r24
 71a:	59 0b       	sbc	r21, r25
 71c:	ca 01       	movw	r24, r20
 71e:	aa 27       	eor	r26, r26
 720:	97 fd       	sbrc	r25, 7
 722:	a0 95       	com	r26
 724:	ba 2f       	mov	r27, r26
 726:	bc 01       	movw	r22, r24
 728:	cd 01       	movw	r24, r26
 72a:	0e 94 99 05 	call	0xb32	; 0xb32 <__floatsisf>
 72e:	dc 01       	movw	r26, r24
 730:	cb 01       	movw	r24, r22
 732:	9e 01       	movw	r18, r28
 734:	25 5b       	subi	r18, 0xB5	; 181
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	f9 01       	movw	r30, r18
 73a:	80 83       	st	Z, r24
 73c:	91 83       	std	Z+1, r25	; 0x01
 73e:	a2 83       	std	Z+2, r26	; 0x02
 740:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
 742:	8e 01       	movw	r16, r28
 744:	01 5b       	subi	r16, 0xB1	; 177
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	ce 01       	movw	r24, r28
 74a:	85 5b       	subi	r24, 0xB5	; 181
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	fc 01       	movw	r30, r24
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	93 81       	ldd	r25, Z+3	; 0x03
 758:	2b ea       	ldi	r18, 0xAB	; 171
 75a:	3a ea       	ldi	r19, 0xAA	; 170
 75c:	4a ea       	ldi	r20, 0xAA	; 170
 75e:	50 e4       	ldi	r21, 0x40	; 64
 760:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 764:	dc 01       	movw	r26, r24
 766:	cb 01       	movw	r24, r22
 768:	f8 01       	movw	r30, r16
 76a:	80 83       	st	Z, r24
 76c:	91 83       	std	Z+1, r25	; 0x01
 76e:	a2 83       	std	Z+2, r26	; 0x02
 770:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 772:	ce 01       	movw	r24, r28
 774:	81 5b       	subi	r24, 0xB1	; 177
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	11 e0       	ldi	r17, 0x01	; 1
 77a:	fc 01       	movw	r30, r24
 77c:	60 81       	ld	r22, Z
 77e:	71 81       	ldd	r23, Z+1	; 0x01
 780:	82 81       	ldd	r24, Z+2	; 0x02
 782:	93 81       	ldd	r25, Z+3	; 0x03
 784:	20 e0       	ldi	r18, 0x00	; 0
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	40 e8       	ldi	r20, 0x80	; 128
 78a:	5f e3       	ldi	r21, 0x3F	; 63
 78c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 790:	88 23       	and	r24, r24
 792:	0c f0       	brlt	.+2      	; 0x796 <main+0x704>
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	11 23       	and	r17, r17
 798:	39 f0       	breq	.+14     	; 0x7a8 <main+0x716>
		__ticks = 1;
 79a:	ce 01       	movw	r24, r28
 79c:	8d 5a       	subi	r24, 0xAD	; 173
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	fc 01       	movw	r30, r24
 7a4:	20 83       	st	Z, r18
 7a6:	05 c1       	rjmp	.+522    	; 0x9b2 <__stack+0x153>
	else if (__tmp > 255)
 7a8:	ce 01       	movw	r24, r28
 7aa:	81 5b       	subi	r24, 0xB1	; 177
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	11 e0       	ldi	r17, 0x01	; 1
 7b0:	fc 01       	movw	r30, r24
 7b2:	60 81       	ld	r22, Z
 7b4:	71 81       	ldd	r23, Z+1	; 0x01
 7b6:	82 81       	ldd	r24, Z+2	; 0x02
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	4f e7       	ldi	r20, 0x7F	; 127
 7c0:	53 e4       	ldi	r21, 0x43	; 67
 7c2:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 7c6:	18 16       	cp	r1, r24
 7c8:	0c f0       	brlt	.+2      	; 0x7cc <main+0x73a>
 7ca:	10 e0       	ldi	r17, 0x00	; 0
 7cc:	11 23       	and	r17, r17
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x740>
 7d0:	df c0       	rjmp	.+446    	; 0x990 <__stack+0x131>
	{
		_delay_ms(__us / 1000.0);
 7d2:	ce 01       	movw	r24, r28
 7d4:	85 5b       	subi	r24, 0xB5	; 181
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	fc 01       	movw	r30, r24
 7da:	60 81       	ld	r22, Z
 7dc:	71 81       	ldd	r23, Z+1	; 0x01
 7de:	82 81       	ldd	r24, Z+2	; 0x02
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	4a e7       	ldi	r20, 0x7A	; 122
 7e8:	54 e4       	ldi	r21, 0x44	; 68
 7ea:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 7ee:	dc 01       	movw	r26, r24
 7f0:	cb 01       	movw	r24, r22
 7f2:	9e 01       	movw	r18, r28
 7f4:	2c 5a       	subi	r18, 0xAC	; 172
 7f6:	3f 4f       	sbci	r19, 0xFF	; 255
 7f8:	f9 01       	movw	r30, r18
 7fa:	80 83       	st	Z, r24
 7fc:	91 83       	std	Z+1, r25	; 0x01
 7fe:	a2 83       	std	Z+2, r26	; 0x02
 800:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 802:	8e 01       	movw	r16, r28
 804:	08 5a       	subi	r16, 0xA8	; 168
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	ce 01       	movw	r24, r28
 80a:	8c 5a       	subi	r24, 0xAC	; 172
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	fc 01       	movw	r30, r24
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	4a e7       	ldi	r20, 0x7A	; 122
 81e:	55 e4       	ldi	r21, 0x45	; 69
 820:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 824:	dc 01       	movw	r26, r24
 826:	cb 01       	movw	r24, r22
 828:	f8 01       	movw	r30, r16
 82a:	80 83       	st	Z, r24
 82c:	91 83       	std	Z+1, r25	; 0x01
 82e:	a2 83       	std	Z+2, r26	; 0x02
 830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 832:	ce 01       	movw	r24, r28
 834:	88 5a       	subi	r24, 0xA8	; 168
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	11 e0       	ldi	r17, 0x01	; 1
 83a:	fc 01       	movw	r30, r24
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	20 e0       	ldi	r18, 0x00	; 0
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	40 e8       	ldi	r20, 0x80	; 128
 84a:	5f e3       	ldi	r21, 0x3F	; 63
 84c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 850:	88 23       	and	r24, r24
 852:	0c f0       	brlt	.+2      	; 0x856 <main+0x7c4>
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	11 23       	and	r17, r17
 858:	49 f0       	breq	.+18     	; 0x86c <__stack+0xd>
		__ticks = 1;
 85a:	ce 01       	movw	r24, r28
 85c:	84 5a       	subi	r24, 0xA4	; 164
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	21 e0       	ldi	r18, 0x01	; 1
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	fc 01       	movw	r30, r24
 866:	31 83       	std	Z+1, r19	; 0x01
 868:	20 83       	st	Z, r18
 86a:	74 c0       	rjmp	.+232    	; 0x954 <__stack+0xf5>
	else if (__tmp > 65535)
 86c:	ce 01       	movw	r24, r28
 86e:	88 5a       	subi	r24, 0xA8	; 168
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	11 e0       	ldi	r17, 0x01	; 1
 874:	fc 01       	movw	r30, r24
 876:	60 81       	ld	r22, Z
 878:	71 81       	ldd	r23, Z+1	; 0x01
 87a:	82 81       	ldd	r24, Z+2	; 0x02
 87c:	93 81       	ldd	r25, Z+3	; 0x03
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	3f ef       	ldi	r19, 0xFF	; 255
 882:	4f e7       	ldi	r20, 0x7F	; 127
 884:	57 e4       	ldi	r21, 0x47	; 71
 886:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
 88a:	18 16       	cp	r1, r24
 88c:	0c f0       	brlt	.+2      	; 0x890 <__stack+0x31>
 88e:	10 e0       	ldi	r17, 0x00	; 0
 890:	11 23       	and	r17, r17
 892:	09 f4       	brne	.+2      	; 0x896 <__stack+0x37>
 894:	4d c0       	rjmp	.+154    	; 0x930 <__stack+0xd1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 896:	ce 01       	movw	r24, r28
 898:	8c 5a       	subi	r24, 0xAC	; 172
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	fc 01       	movw	r30, r24
 89e:	60 81       	ld	r22, Z
 8a0:	71 81       	ldd	r23, Z+1	; 0x01
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	40 e2       	ldi	r20, 0x20	; 32
 8ac:	51 e4       	ldi	r21, 0x41	; 65
 8ae:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3>
 8b2:	dc 01       	movw	r26, r24
 8b4:	cb 01       	movw	r24, r22
 8b6:	8e 01       	movw	r16, r28
 8b8:	04 5a       	subi	r16, 0xA4	; 164
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	bc 01       	movw	r22, r24
 8be:	cd 01       	movw	r24, r26
 8c0:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 8c4:	dc 01       	movw	r26, r24
 8c6:	cb 01       	movw	r24, r22
 8c8:	f8 01       	movw	r30, r16
 8ca:	91 83       	std	Z+1, r25	; 0x01
 8cc:	80 83       	st	Z, r24
 8ce:	27 c0       	rjmp	.+78     	; 0x91e <__stack+0xbf>
 8d0:	ce 01       	movw	r24, r28
 8d2:	82 5a       	subi	r24, 0xA2	; 162
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	20 e9       	ldi	r18, 0x90	; 144
 8d8:	31 e0       	ldi	r19, 0x01	; 1
 8da:	fc 01       	movw	r30, r24
 8dc:	31 83       	std	Z+1, r19	; 0x01
 8de:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8e0:	ce 01       	movw	r24, r28
 8e2:	82 5a       	subi	r24, 0xA2	; 162
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	fc 01       	movw	r30, r24
 8e8:	80 81       	ld	r24, Z
 8ea:	91 81       	ldd	r25, Z+1	; 0x01
 8ec:	8c 01       	movw	r16, r24
 8ee:	c8 01       	movw	r24, r16
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
 8f4:	8c 01       	movw	r16, r24
 8f6:	ce 01       	movw	r24, r28
 8f8:	82 5a       	subi	r24, 0xA2	; 162
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	fc 01       	movw	r30, r24
 8fe:	11 83       	std	Z+1, r17	; 0x01
 900:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 902:	ce 01       	movw	r24, r28
 904:	84 5a       	subi	r24, 0xA4	; 164
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	9e 01       	movw	r18, r28
 90a:	24 5a       	subi	r18, 0xA4	; 164
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	f9 01       	movw	r30, r18
 910:	20 81       	ld	r18, Z
 912:	31 81       	ldd	r19, Z+1	; 0x01
 914:	21 50       	subi	r18, 0x01	; 1
 916:	30 40       	sbci	r19, 0x00	; 0
 918:	fc 01       	movw	r30, r24
 91a:	31 83       	std	Z+1, r19	; 0x01
 91c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 91e:	ce 01       	movw	r24, r28
 920:	84 5a       	subi	r24, 0xA4	; 164
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	fc 01       	movw	r30, r24
 926:	80 81       	ld	r24, Z
 928:	91 81       	ldd	r25, Z+1	; 0x01
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	89 f6       	brne	.-94     	; 0x8d0 <__stack+0x71>
 92e:	58 c0       	rjmp	.+176    	; 0x9e0 <__stack+0x181>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 930:	8e 01       	movw	r16, r28
 932:	04 5a       	subi	r16, 0xA4	; 164
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	ce 01       	movw	r24, r28
 938:	88 5a       	subi	r24, 0xA8	; 168
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	fc 01       	movw	r30, r24
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 94a:	dc 01       	movw	r26, r24
 94c:	cb 01       	movw	r24, r22
 94e:	f8 01       	movw	r30, r16
 950:	91 83       	std	Z+1, r25	; 0x01
 952:	80 83       	st	Z, r24
 954:	ce 01       	movw	r24, r28
 956:	80 5a       	subi	r24, 0xA0	; 160
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	9e 01       	movw	r18, r28
 95c:	24 5a       	subi	r18, 0xA4	; 164
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	f9 01       	movw	r30, r18
 962:	20 81       	ld	r18, Z
 964:	31 81       	ldd	r19, Z+1	; 0x01
 966:	fc 01       	movw	r30, r24
 968:	31 83       	std	Z+1, r19	; 0x01
 96a:	20 83       	st	Z, r18
 96c:	ce 01       	movw	r24, r28
 96e:	80 5a       	subi	r24, 0xA0	; 160
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	fc 01       	movw	r30, r24
 974:	80 81       	ld	r24, Z
 976:	91 81       	ldd	r25, Z+1	; 0x01
 978:	8c 01       	movw	r16, r24
 97a:	c8 01       	movw	r24, r16
 97c:	01 97       	sbiw	r24, 0x01	; 1
 97e:	f1 f7       	brne	.-4      	; 0x97c <__stack+0x11d>
 980:	8c 01       	movw	r16, r24
 982:	ce 01       	movw	r24, r28
 984:	80 5a       	subi	r24, 0xA0	; 160
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	fc 01       	movw	r30, r24
 98a:	11 83       	std	Z+1, r17	; 0x01
 98c:	00 83       	st	Z, r16
 98e:	28 c0       	rjmp	.+80     	; 0x9e0 <__stack+0x181>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 990:	8e 01       	movw	r16, r28
 992:	0d 5a       	subi	r16, 0xAD	; 173
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	ce 01       	movw	r24, r28
 998:	81 5b       	subi	r24, 0xB1	; 177
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	fc 01       	movw	r30, r24
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
 9aa:	dc 01       	movw	r26, r24
 9ac:	cb 01       	movw	r24, r22
 9ae:	f8 01       	movw	r30, r16
 9b0:	80 83       	st	Z, r24
 9b2:	ce 01       	movw	r24, r28
 9b4:	8e 59       	subi	r24, 0x9E	; 158
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	9e 01       	movw	r18, r28
 9ba:	2d 5a       	subi	r18, 0xAD	; 173
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	f9 01       	movw	r30, r18
 9c0:	20 81       	ld	r18, Z
 9c2:	fc 01       	movw	r30, r24
 9c4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 9c6:	ce 01       	movw	r24, r28
 9c8:	8e 59       	subi	r24, 0x9E	; 158
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	fc 01       	movw	r30, r24
 9ce:	80 81       	ld	r24, Z
 9d0:	18 2f       	mov	r17, r24
 9d2:	1a 95       	dec	r17
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <__stack+0x173>
 9d6:	ce 01       	movw	r24, r28
 9d8:	8e 59       	subi	r24, 0x9E	; 158
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	fc 01       	movw	r30, r24
 9de:	10 83       	st	Z, r17
				PORTA = 0b11111111;
				_delay_us(1000 - x);
			
			}
			x = 0;
			while(x < 1000)
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	9a 81       	ldd	r25, Y+2	; 0x02
 9e4:	f3 e0       	ldi	r31, 0x03	; 3
 9e6:	88 3e       	cpi	r24, 0xE8	; 232
 9e8:	9f 07       	cpc	r25, r31
 9ea:	0c f4       	brge	.+2      	; 0x9ee <__stack+0x18f>
 9ec:	53 cd       	rjmp	.-1370   	; 0x494 <main+0x402>
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <__stack+0x19d>
			
			}
		}
		else
		{
			PORTA = 0b11111111;
 9f0:	8b e3       	ldi	r24, 0x3B	; 59
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	2f ef       	ldi	r18, 0xFF	; 255
 9f6:	fc 01       	movw	r30, r24
 9f8:	20 83       	st	Z, r18
			
		}
		
		
    }
 9fa:	66 cb       	rjmp	.-2356   	; 0xc8 <main+0x36>
 9fc:	65 cb       	rjmp	.-2358   	; 0xc8 <main+0x36>

000009fe <__cmpsf2>:
 9fe:	d4 d0       	rcall	.+424    	; 0xba8 <__fp_cmp>
 a00:	08 f4       	brcc	.+2      	; 0xa04 <__cmpsf2+0x6>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	08 95       	ret

00000a06 <__divsf3>:
 a06:	0c d0       	rcall	.+24     	; 0xa20 <__divsf3x>
 a08:	0a c1       	rjmp	.+532    	; 0xc1e <__fp_round>
 a0a:	02 d1       	rcall	.+516    	; 0xc10 <__fp_pscB>
 a0c:	40 f0       	brcs	.+16     	; 0xa1e <__divsf3+0x18>
 a0e:	f9 d0       	rcall	.+498    	; 0xc02 <__fp_pscA>
 a10:	30 f0       	brcs	.+12     	; 0xa1e <__divsf3+0x18>
 a12:	21 f4       	brne	.+8      	; 0xa1c <__divsf3+0x16>
 a14:	5f 3f       	cpi	r21, 0xFF	; 255
 a16:	19 f0       	breq	.+6      	; 0xa1e <__divsf3+0x18>
 a18:	eb c0       	rjmp	.+470    	; 0xbf0 <__fp_inf>
 a1a:	51 11       	cpse	r21, r1
 a1c:	34 c1       	rjmp	.+616    	; 0xc86 <__fp_szero>
 a1e:	ee c0       	rjmp	.+476    	; 0xbfc <__fp_nan>

00000a20 <__divsf3x>:
 a20:	0f d1       	rcall	.+542    	; 0xc40 <__fp_split3>
 a22:	98 f3       	brcs	.-26     	; 0xa0a <__divsf3+0x4>

00000a24 <__divsf3_pse>:
 a24:	99 23       	and	r25, r25
 a26:	c9 f3       	breq	.-14     	; 0xa1a <__divsf3+0x14>
 a28:	55 23       	and	r21, r21
 a2a:	b1 f3       	breq	.-20     	; 0xa18 <__divsf3+0x12>
 a2c:	95 1b       	sub	r25, r21
 a2e:	55 0b       	sbc	r21, r21
 a30:	bb 27       	eor	r27, r27
 a32:	aa 27       	eor	r26, r26
 a34:	62 17       	cp	r22, r18
 a36:	73 07       	cpc	r23, r19
 a38:	84 07       	cpc	r24, r20
 a3a:	38 f0       	brcs	.+14     	; 0xa4a <__divsf3_pse+0x26>
 a3c:	9f 5f       	subi	r25, 0xFF	; 255
 a3e:	5f 4f       	sbci	r21, 0xFF	; 255
 a40:	22 0f       	add	r18, r18
 a42:	33 1f       	adc	r19, r19
 a44:	44 1f       	adc	r20, r20
 a46:	aa 1f       	adc	r26, r26
 a48:	a9 f3       	breq	.-22     	; 0xa34 <__divsf3_pse+0x10>
 a4a:	33 d0       	rcall	.+102    	; 0xab2 <__divsf3_pse+0x8e>
 a4c:	0e 2e       	mov	r0, r30
 a4e:	3a f0       	brmi	.+14     	; 0xa5e <__divsf3_pse+0x3a>
 a50:	e0 e8       	ldi	r30, 0x80	; 128
 a52:	30 d0       	rcall	.+96     	; 0xab4 <__divsf3_pse+0x90>
 a54:	91 50       	subi	r25, 0x01	; 1
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	e6 95       	lsr	r30
 a5a:	00 1c       	adc	r0, r0
 a5c:	ca f7       	brpl	.-14     	; 0xa50 <__divsf3_pse+0x2c>
 a5e:	29 d0       	rcall	.+82     	; 0xab2 <__divsf3_pse+0x8e>
 a60:	fe 2f       	mov	r31, r30
 a62:	27 d0       	rcall	.+78     	; 0xab2 <__divsf3_pse+0x8e>
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	bb 1f       	adc	r27, r27
 a6c:	26 17       	cp	r18, r22
 a6e:	37 07       	cpc	r19, r23
 a70:	48 07       	cpc	r20, r24
 a72:	ab 07       	cpc	r26, r27
 a74:	b0 e8       	ldi	r27, 0x80	; 128
 a76:	09 f0       	breq	.+2      	; 0xa7a <__divsf3_pse+0x56>
 a78:	bb 0b       	sbc	r27, r27
 a7a:	80 2d       	mov	r24, r0
 a7c:	bf 01       	movw	r22, r30
 a7e:	ff 27       	eor	r31, r31
 a80:	93 58       	subi	r25, 0x83	; 131
 a82:	5f 4f       	sbci	r21, 0xFF	; 255
 a84:	2a f0       	brmi	.+10     	; 0xa90 <__divsf3_pse+0x6c>
 a86:	9e 3f       	cpi	r25, 0xFE	; 254
 a88:	51 05       	cpc	r21, r1
 a8a:	68 f0       	brcs	.+26     	; 0xaa6 <__divsf3_pse+0x82>
 a8c:	b1 c0       	rjmp	.+354    	; 0xbf0 <__fp_inf>
 a8e:	fb c0       	rjmp	.+502    	; 0xc86 <__fp_szero>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	ec f3       	brlt	.-6      	; 0xa8e <__divsf3_pse+0x6a>
 a94:	98 3e       	cpi	r25, 0xE8	; 232
 a96:	dc f3       	brlt	.-10     	; 0xa8e <__divsf3_pse+0x6a>
 a98:	86 95       	lsr	r24
 a9a:	77 95       	ror	r23
 a9c:	67 95       	ror	r22
 a9e:	b7 95       	ror	r27
 aa0:	f7 95       	ror	r31
 aa2:	9f 5f       	subi	r25, 0xFF	; 255
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__divsf3_pse+0x74>
 aa6:	88 0f       	add	r24, r24
 aa8:	91 1d       	adc	r25, r1
 aaa:	96 95       	lsr	r25
 aac:	87 95       	ror	r24
 aae:	97 f9       	bld	r25, 7
 ab0:	08 95       	ret
 ab2:	e1 e0       	ldi	r30, 0x01	; 1
 ab4:	66 0f       	add	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	bb 1f       	adc	r27, r27
 abc:	62 17       	cp	r22, r18
 abe:	73 07       	cpc	r23, r19
 ac0:	84 07       	cpc	r24, r20
 ac2:	ba 07       	cpc	r27, r26
 ac4:	20 f0       	brcs	.+8      	; 0xace <__divsf3_pse+0xaa>
 ac6:	62 1b       	sub	r22, r18
 ac8:	73 0b       	sbc	r23, r19
 aca:	84 0b       	sbc	r24, r20
 acc:	ba 0b       	sbc	r27, r26
 ace:	ee 1f       	adc	r30, r30
 ad0:	88 f7       	brcc	.-30     	; 0xab4 <__divsf3_pse+0x90>
 ad2:	e0 95       	com	r30
 ad4:	08 95       	ret

00000ad6 <__fixunssfsi>:
 ad6:	bc d0       	rcall	.+376    	; 0xc50 <__fp_splitA>
 ad8:	88 f0       	brcs	.+34     	; 0xafc <__fixunssfsi+0x26>
 ada:	9f 57       	subi	r25, 0x7F	; 127
 adc:	90 f0       	brcs	.+36     	; 0xb02 <__fixunssfsi+0x2c>
 ade:	b9 2f       	mov	r27, r25
 ae0:	99 27       	eor	r25, r25
 ae2:	b7 51       	subi	r27, 0x17	; 23
 ae4:	a0 f0       	brcs	.+40     	; 0xb0e <__fixunssfsi+0x38>
 ae6:	d1 f0       	breq	.+52     	; 0xb1c <__fixunssfsi+0x46>
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	99 1f       	adc	r25, r25
 af0:	1a f0       	brmi	.+6      	; 0xaf8 <__fixunssfsi+0x22>
 af2:	ba 95       	dec	r27
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__fixunssfsi+0x12>
 af6:	12 c0       	rjmp	.+36     	; 0xb1c <__fixunssfsi+0x46>
 af8:	b1 30       	cpi	r27, 0x01	; 1
 afa:	81 f0       	breq	.+32     	; 0xb1c <__fixunssfsi+0x46>
 afc:	c3 d0       	rcall	.+390    	; 0xc84 <__fp_zero>
 afe:	b1 e0       	ldi	r27, 0x01	; 1
 b00:	08 95       	ret
 b02:	c0 c0       	rjmp	.+384    	; 0xc84 <__fp_zero>
 b04:	67 2f       	mov	r22, r23
 b06:	78 2f       	mov	r23, r24
 b08:	88 27       	eor	r24, r24
 b0a:	b8 5f       	subi	r27, 0xF8	; 248
 b0c:	39 f0       	breq	.+14     	; 0xb1c <__fixunssfsi+0x46>
 b0e:	b9 3f       	cpi	r27, 0xF9	; 249
 b10:	cc f3       	brlt	.-14     	; 0xb04 <__fixunssfsi+0x2e>
 b12:	86 95       	lsr	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b3 95       	inc	r27
 b1a:	d9 f7       	brne	.-10     	; 0xb12 <__fixunssfsi+0x3c>
 b1c:	3e f4       	brtc	.+14     	; 0xb2c <__fixunssfsi+0x56>
 b1e:	90 95       	com	r25
 b20:	80 95       	com	r24
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	08 95       	ret

00000b2e <__floatunsisf>:
 b2e:	e8 94       	clt
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <__floatsisf+0x12>

00000b32 <__floatsisf>:
 b32:	97 fb       	bst	r25, 7
 b34:	3e f4       	brtc	.+14     	; 0xb44 <__floatsisf+0x12>
 b36:	90 95       	com	r25
 b38:	80 95       	com	r24
 b3a:	70 95       	com	r23
 b3c:	61 95       	neg	r22
 b3e:	7f 4f       	sbci	r23, 0xFF	; 255
 b40:	8f 4f       	sbci	r24, 0xFF	; 255
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	99 23       	and	r25, r25
 b46:	a9 f0       	breq	.+42     	; 0xb72 <__floatsisf+0x40>
 b48:	f9 2f       	mov	r31, r25
 b4a:	96 e9       	ldi	r25, 0x96	; 150
 b4c:	bb 27       	eor	r27, r27
 b4e:	93 95       	inc	r25
 b50:	f6 95       	lsr	r31
 b52:	87 95       	ror	r24
 b54:	77 95       	ror	r23
 b56:	67 95       	ror	r22
 b58:	b7 95       	ror	r27
 b5a:	f1 11       	cpse	r31, r1
 b5c:	f8 cf       	rjmp	.-16     	; 0xb4e <__floatsisf+0x1c>
 b5e:	fa f4       	brpl	.+62     	; 0xb9e <__floatsisf+0x6c>
 b60:	bb 0f       	add	r27, r27
 b62:	11 f4       	brne	.+4      	; 0xb68 <__floatsisf+0x36>
 b64:	60 ff       	sbrs	r22, 0
 b66:	1b c0       	rjmp	.+54     	; 0xb9e <__floatsisf+0x6c>
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	16 c0       	rjmp	.+44     	; 0xb9e <__floatsisf+0x6c>
 b72:	88 23       	and	r24, r24
 b74:	11 f0       	breq	.+4      	; 0xb7a <__floatsisf+0x48>
 b76:	96 e9       	ldi	r25, 0x96	; 150
 b78:	11 c0       	rjmp	.+34     	; 0xb9c <__floatsisf+0x6a>
 b7a:	77 23       	and	r23, r23
 b7c:	21 f0       	breq	.+8      	; 0xb86 <__floatsisf+0x54>
 b7e:	9e e8       	ldi	r25, 0x8E	; 142
 b80:	87 2f       	mov	r24, r23
 b82:	76 2f       	mov	r23, r22
 b84:	05 c0       	rjmp	.+10     	; 0xb90 <__floatsisf+0x5e>
 b86:	66 23       	and	r22, r22
 b88:	71 f0       	breq	.+28     	; 0xba6 <__floatsisf+0x74>
 b8a:	96 e8       	ldi	r25, 0x86	; 134
 b8c:	86 2f       	mov	r24, r22
 b8e:	70 e0       	ldi	r23, 0x00	; 0
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	2a f0       	brmi	.+10     	; 0xb9e <__floatsisf+0x6c>
 b94:	9a 95       	dec	r25
 b96:	66 0f       	add	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	da f7       	brpl	.-10     	; 0xb94 <__floatsisf+0x62>
 b9e:	88 0f       	add	r24, r24
 ba0:	96 95       	lsr	r25
 ba2:	87 95       	ror	r24
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__fp_cmp>:
 ba8:	99 0f       	add	r25, r25
 baa:	00 08       	sbc	r0, r0
 bac:	55 0f       	add	r21, r21
 bae:	aa 0b       	sbc	r26, r26
 bb0:	e0 e8       	ldi	r30, 0x80	; 128
 bb2:	fe ef       	ldi	r31, 0xFE	; 254
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	e8 07       	cpc	r30, r24
 bba:	f9 07       	cpc	r31, r25
 bbc:	c0 f0       	brcs	.+48     	; 0xbee <__fp_cmp+0x46>
 bbe:	12 16       	cp	r1, r18
 bc0:	13 06       	cpc	r1, r19
 bc2:	e4 07       	cpc	r30, r20
 bc4:	f5 07       	cpc	r31, r21
 bc6:	98 f0       	brcs	.+38     	; 0xbee <__fp_cmp+0x46>
 bc8:	62 1b       	sub	r22, r18
 bca:	73 0b       	sbc	r23, r19
 bcc:	84 0b       	sbc	r24, r20
 bce:	95 0b       	sbc	r25, r21
 bd0:	39 f4       	brne	.+14     	; 0xbe0 <__fp_cmp+0x38>
 bd2:	0a 26       	eor	r0, r26
 bd4:	61 f0       	breq	.+24     	; 0xbee <__fp_cmp+0x46>
 bd6:	23 2b       	or	r18, r19
 bd8:	24 2b       	or	r18, r20
 bda:	25 2b       	or	r18, r21
 bdc:	21 f4       	brne	.+8      	; 0xbe6 <__fp_cmp+0x3e>
 bde:	08 95       	ret
 be0:	0a 26       	eor	r0, r26
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__fp_cmp+0x3e>
 be4:	a1 40       	sbci	r26, 0x01	; 1
 be6:	a6 95       	lsr	r26
 be8:	8f ef       	ldi	r24, 0xFF	; 255
 bea:	81 1d       	adc	r24, r1
 bec:	81 1d       	adc	r24, r1
 bee:	08 95       	ret

00000bf0 <__fp_inf>:
 bf0:	97 f9       	bld	r25, 7
 bf2:	9f 67       	ori	r25, 0x7F	; 127
 bf4:	80 e8       	ldi	r24, 0x80	; 128
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	08 95       	ret

00000bfc <__fp_nan>:
 bfc:	9f ef       	ldi	r25, 0xFF	; 255
 bfe:	80 ec       	ldi	r24, 0xC0	; 192
 c00:	08 95       	ret

00000c02 <__fp_pscA>:
 c02:	00 24       	eor	r0, r0
 c04:	0a 94       	dec	r0
 c06:	16 16       	cp	r1, r22
 c08:	17 06       	cpc	r1, r23
 c0a:	18 06       	cpc	r1, r24
 c0c:	09 06       	cpc	r0, r25
 c0e:	08 95       	ret

00000c10 <__fp_pscB>:
 c10:	00 24       	eor	r0, r0
 c12:	0a 94       	dec	r0
 c14:	12 16       	cp	r1, r18
 c16:	13 06       	cpc	r1, r19
 c18:	14 06       	cpc	r1, r20
 c1a:	05 06       	cpc	r0, r21
 c1c:	08 95       	ret

00000c1e <__fp_round>:
 c1e:	09 2e       	mov	r0, r25
 c20:	03 94       	inc	r0
 c22:	00 0c       	add	r0, r0
 c24:	11 f4       	brne	.+4      	; 0xc2a <__fp_round+0xc>
 c26:	88 23       	and	r24, r24
 c28:	52 f0       	brmi	.+20     	; 0xc3e <__fp_round+0x20>
 c2a:	bb 0f       	add	r27, r27
 c2c:	40 f4       	brcc	.+16     	; 0xc3e <__fp_round+0x20>
 c2e:	bf 2b       	or	r27, r31
 c30:	11 f4       	brne	.+4      	; 0xc36 <__fp_round+0x18>
 c32:	60 ff       	sbrs	r22, 0
 c34:	04 c0       	rjmp	.+8      	; 0xc3e <__fp_round+0x20>
 c36:	6f 5f       	subi	r22, 0xFF	; 255
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__fp_split3>:
 c40:	57 fd       	sbrc	r21, 7
 c42:	90 58       	subi	r25, 0x80	; 128
 c44:	44 0f       	add	r20, r20
 c46:	55 1f       	adc	r21, r21
 c48:	59 f0       	breq	.+22     	; 0xc60 <__fp_splitA+0x10>
 c4a:	5f 3f       	cpi	r21, 0xFF	; 255
 c4c:	71 f0       	breq	.+28     	; 0xc6a <__fp_splitA+0x1a>
 c4e:	47 95       	ror	r20

00000c50 <__fp_splitA>:
 c50:	88 0f       	add	r24, r24
 c52:	97 fb       	bst	r25, 7
 c54:	99 1f       	adc	r25, r25
 c56:	61 f0       	breq	.+24     	; 0xc70 <__fp_splitA+0x20>
 c58:	9f 3f       	cpi	r25, 0xFF	; 255
 c5a:	79 f0       	breq	.+30     	; 0xc7a <__fp_splitA+0x2a>
 c5c:	87 95       	ror	r24
 c5e:	08 95       	ret
 c60:	12 16       	cp	r1, r18
 c62:	13 06       	cpc	r1, r19
 c64:	14 06       	cpc	r1, r20
 c66:	55 1f       	adc	r21, r21
 c68:	f2 cf       	rjmp	.-28     	; 0xc4e <__fp_split3+0xe>
 c6a:	46 95       	lsr	r20
 c6c:	f1 df       	rcall	.-30     	; 0xc50 <__fp_splitA>
 c6e:	08 c0       	rjmp	.+16     	; 0xc80 <__fp_splitA+0x30>
 c70:	16 16       	cp	r1, r22
 c72:	17 06       	cpc	r1, r23
 c74:	18 06       	cpc	r1, r24
 c76:	99 1f       	adc	r25, r25
 c78:	f1 cf       	rjmp	.-30     	; 0xc5c <__fp_splitA+0xc>
 c7a:	86 95       	lsr	r24
 c7c:	71 05       	cpc	r23, r1
 c7e:	61 05       	cpc	r22, r1
 c80:	08 94       	sec
 c82:	08 95       	ret

00000c84 <__fp_zero>:
 c84:	e8 94       	clt

00000c86 <__fp_szero>:
 c86:	bb 27       	eor	r27, r27
 c88:	66 27       	eor	r22, r22
 c8a:	77 27       	eor	r23, r23
 c8c:	cb 01       	movw	r24, r22
 c8e:	97 f9       	bld	r25, 7
 c90:	08 95       	ret

00000c92 <__gesf2>:
 c92:	8a df       	rcall	.-236    	; 0xba8 <__fp_cmp>
 c94:	08 f4       	brcc	.+2      	; 0xc98 <__gesf2+0x6>
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <__mulsf3>:
 c9a:	0b d0       	rcall	.+22     	; 0xcb2 <__mulsf3x>
 c9c:	c0 cf       	rjmp	.-128    	; 0xc1e <__fp_round>
 c9e:	b1 df       	rcall	.-158    	; 0xc02 <__fp_pscA>
 ca0:	28 f0       	brcs	.+10     	; 0xcac <__mulsf3+0x12>
 ca2:	b6 df       	rcall	.-148    	; 0xc10 <__fp_pscB>
 ca4:	18 f0       	brcs	.+6      	; 0xcac <__mulsf3+0x12>
 ca6:	95 23       	and	r25, r21
 ca8:	09 f0       	breq	.+2      	; 0xcac <__mulsf3+0x12>
 caa:	a2 cf       	rjmp	.-188    	; 0xbf0 <__fp_inf>
 cac:	a7 cf       	rjmp	.-178    	; 0xbfc <__fp_nan>
 cae:	11 24       	eor	r1, r1
 cb0:	ea cf       	rjmp	.-44     	; 0xc86 <__fp_szero>

00000cb2 <__mulsf3x>:
 cb2:	c6 df       	rcall	.-116    	; 0xc40 <__fp_split3>
 cb4:	a0 f3       	brcs	.-24     	; 0xc9e <__mulsf3+0x4>

00000cb6 <__mulsf3_pse>:
 cb6:	95 9f       	mul	r25, r21
 cb8:	d1 f3       	breq	.-12     	; 0xcae <__mulsf3+0x14>
 cba:	95 0f       	add	r25, r21
 cbc:	50 e0       	ldi	r21, 0x00	; 0
 cbe:	55 1f       	adc	r21, r21
 cc0:	62 9f       	mul	r22, r18
 cc2:	f0 01       	movw	r30, r0
 cc4:	72 9f       	mul	r23, r18
 cc6:	bb 27       	eor	r27, r27
 cc8:	f0 0d       	add	r31, r0
 cca:	b1 1d       	adc	r27, r1
 ccc:	63 9f       	mul	r22, r19
 cce:	aa 27       	eor	r26, r26
 cd0:	f0 0d       	add	r31, r0
 cd2:	b1 1d       	adc	r27, r1
 cd4:	aa 1f       	adc	r26, r26
 cd6:	64 9f       	mul	r22, r20
 cd8:	66 27       	eor	r22, r22
 cda:	b0 0d       	add	r27, r0
 cdc:	a1 1d       	adc	r26, r1
 cde:	66 1f       	adc	r22, r22
 ce0:	82 9f       	mul	r24, r18
 ce2:	22 27       	eor	r18, r18
 ce4:	b0 0d       	add	r27, r0
 ce6:	a1 1d       	adc	r26, r1
 ce8:	62 1f       	adc	r22, r18
 cea:	73 9f       	mul	r23, r19
 cec:	b0 0d       	add	r27, r0
 cee:	a1 1d       	adc	r26, r1
 cf0:	62 1f       	adc	r22, r18
 cf2:	83 9f       	mul	r24, r19
 cf4:	a0 0d       	add	r26, r0
 cf6:	61 1d       	adc	r22, r1
 cf8:	22 1f       	adc	r18, r18
 cfa:	74 9f       	mul	r23, r20
 cfc:	33 27       	eor	r19, r19
 cfe:	a0 0d       	add	r26, r0
 d00:	61 1d       	adc	r22, r1
 d02:	23 1f       	adc	r18, r19
 d04:	84 9f       	mul	r24, r20
 d06:	60 0d       	add	r22, r0
 d08:	21 1d       	adc	r18, r1
 d0a:	82 2f       	mov	r24, r18
 d0c:	76 2f       	mov	r23, r22
 d0e:	6a 2f       	mov	r22, r26
 d10:	11 24       	eor	r1, r1
 d12:	9f 57       	subi	r25, 0x7F	; 127
 d14:	50 40       	sbci	r21, 0x00	; 0
 d16:	8a f0       	brmi	.+34     	; 0xd3a <__mulsf3_pse+0x84>
 d18:	e1 f0       	breq	.+56     	; 0xd52 <__mulsf3_pse+0x9c>
 d1a:	88 23       	and	r24, r24
 d1c:	4a f0       	brmi	.+18     	; 0xd30 <__mulsf3_pse+0x7a>
 d1e:	ee 0f       	add	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	bb 1f       	adc	r27, r27
 d24:	66 1f       	adc	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	91 50       	subi	r25, 0x01	; 1
 d2c:	50 40       	sbci	r21, 0x00	; 0
 d2e:	a9 f7       	brne	.-22     	; 0xd1a <__mulsf3_pse+0x64>
 d30:	9e 3f       	cpi	r25, 0xFE	; 254
 d32:	51 05       	cpc	r21, r1
 d34:	70 f0       	brcs	.+28     	; 0xd52 <__mulsf3_pse+0x9c>
 d36:	5c cf       	rjmp	.-328    	; 0xbf0 <__fp_inf>
 d38:	a6 cf       	rjmp	.-180    	; 0xc86 <__fp_szero>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	ec f3       	brlt	.-6      	; 0xd38 <__mulsf3_pse+0x82>
 d3e:	98 3e       	cpi	r25, 0xE8	; 232
 d40:	dc f3       	brlt	.-10     	; 0xd38 <__mulsf3_pse+0x82>
 d42:	86 95       	lsr	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	b7 95       	ror	r27
 d4a:	f7 95       	ror	r31
 d4c:	e7 95       	ror	r30
 d4e:	9f 5f       	subi	r25, 0xFF	; 255
 d50:	c1 f7       	brne	.-16     	; 0xd42 <__mulsf3_pse+0x8c>
 d52:	fe 2b       	or	r31, r30
 d54:	88 0f       	add	r24, r24
 d56:	91 1d       	adc	r25, r1
 d58:	96 95       	lsr	r25
 d5a:	87 95       	ror	r24
 d5c:	97 f9       	bld	r25, 7
 d5e:	08 95       	ret

00000d60 <_exit>:
 d60:	f8 94       	cli

00000d62 <__stop_program>:
 d62:	ff cf       	rjmp	.-2      	; 0xd62 <__stop_program>
